{
  "category": "Band Filter",
  "content": "from typing import Dict, Union\n\nimport numpy as np\nimport numpy.typing as npt\n\nimport pandas as pd\n\nfrom numba import njit\n\n\ndef median_absolute_deviation(data: npt.ArrayLike) -> np.float64:\n    \"\"\"Calculation of the median absolute deviation (MAD) using numpy functions.\n\n    data (Array like): Values to calculate the MAD for. Must be an array or an object that can be\n        converted to an array.\n\n    Returns: Calculated MAD.\n    \"\"\"\n    return np.median(np.abs(data - np.median(data)))\n\n\n@njit\ndef median_absolute_deviation_numba(data: npt.ArrayLike) -> np.float64:\n    \"\"\"Calculation of the median absolute deviation (MAD) using numpy functions and numba\n    just-in-time compilation.\n\n    data (Array like): Values to calculate the MAD for. Must be an array or an object that can be\n        converted to an array.\n\n    Returns: Calculated MAD.\n    \"\"\"\n    return np.median(np.abs(data - np.median(data)))\n\n\ndef calculate_rolling_median_absolute_deviation(\n    series: pd.Series,\n    mad_scaling_factor: float,\n    window_size: str,\n    min_num_datapoints_in_window: int,\n) -> pd.Series:\n    \"\"\"Calculate the median absolute deviation (MAD) for a rolling window.\n\n    The used MAD function is selected based on the size of the timeseries. The numba version is\n    used for larger series for a reduced runtime. The limit of 10,000 values in a series was chosen\n    as result of runtime tests on different machines.\n\n    series (Pandas Series): Series to perform the MAD calculation on.\n    mad_scaling_factor (Float): Constant by which the MAD is multiplied. 1.4836 makes it equivalent\n        to the standard deviation.\n    window_size (String): Time period of each window. Must be a pandas frequency string.\n    min_num_datapoints_in_window (Integer): Minimum number of observations required in a window to\n        calculate a value.\n\n    Returns: Series with the calculated MAD for each timestamp.\n    \"\"\"\n    if len(series) < 10000:\n        scaled_rolling_median_absolute_deviation = mad_scaling_factor * (\n            series.rolling(\n                window=window_size,\n                min_periods=min_num_datapoints_in_window,\n                center=True,\n            ).apply(median_absolute_deviation, raw=True)\n        )\n    else:\n        scaled_rolling_median_absolute_deviation = mad_scaling_factor * (\n            series.rolling(\n                window=window_size,\n                min_periods=min_num_datapoints_in_window,\n                center=True,\n            ).apply(median_absolute_deviation_numba, raw=True, engine=\"numba\")\n        )\n\n    return scaled_rolling_median_absolute_deviation\n\n\ndef calculate_band_filter_statistics(\n    series: pd.Series,\n    window_size: str,\n    min_num_datapoints_in_window: int,\n    mad_scaling_factor: float,\n    min_band_width_factor: float,\n) -> Dict[str, Union[pd.DataFrame, pd.Series]]:\n    \"\"\"Calculate the moving window band filter statistics.\n\n    The used MAD function is selected based on the size of the timeseries. The numba version is used\n    for larger series for a reduced runtime. The limit of 10000 values in a series was chosen as\n    result of runtime tests on multiple machines.\n\n    series (Pandas Series): Series to calculate the statistics for.\n    window_size (String): Time period of each window. Must be a pandas frequency string.\n    min_num_datapoints_in_window (Integer): Minimum number of observations required in a window\n        to perform a calculation.\n    mad_scaling_factor (Float): Factor by which the MAD is multiplied to scale it. 1.4836 makes\n        it equivalent to the standard deviation.\n    min_band_width_factor (Float): Factor to calculate the minimum band width. The factor is\n        multiplied with the median of the calculated MADs.\n\n    Returns: Series with the calculated MAD for each timestamp.\n    \"\"\"\n    # Convert series to data frame.\n    band_filter_dataframe = series.to_frame(name=\"values\")\n\n    # Calculate the rolling median.\n    band_filter_dataframe[\"band_center\"] = series.rolling(\n        window=window_size, min_periods=min_num_datapoints_in_window, center=True\n    ).median()\n\n    # Calculate the rolling median absolute deviation.\n    band_filter_dataframe[\n        \"rolling_deviation\"\n    ] = calculate_rolling_median_absolute_deviation(\n        series=series,\n        mad_scaling_factor=mad_scaling_factor,\n        window_size=window_size,\n        min_num_datapoints_in_window=min_num_datapoints_in_window,\n    )\n\n    # Set the minimum width of the band.\n    min_width = (\n        np.median(band_filter_dataframe[\"rolling_deviation\"].dropna())\n        * min_band_width_factor\n    )\n    band_filter_dataframe.loc[\n        band_filter_dataframe[\"rolling_deviation\"] < min_width, \"rolling_deviation\"\n    ] = min_width\n\n    # Check which values are invalid.\n    band_filter_dataframe[\"filter_criterium\"] = (\n        np.abs(series - band_filter_dataframe[\"band_center\"])\n        <= band_filter_dataframe[\"rolling_deviation\"]\n    )\n\n    # Set filter_criterium to True for all values for which no calculation could be performed\n    # to keep them after filtering.\n    band_filter_dataframe.loc[\n        band_filter_dataframe[\"band_center\"].isna(), \"filter_criterium\"\n    ] = True\n\n    return [band_filter_dataframe, band_filter_dataframe[\"filter_criterium\"]]\n\n\n# ***** DO NOT EDIT LINES BELOW *****\n# These lines may be overwritten if component details or inputs/outputs change.\nCOMPONENT_INFO = {\n    \"inputs\": {\n        \"series\": \"SERIES\",\n        \"window_size\": \"STRING\",\n        \"min_num_datapoints_in_window\": \"INT\",\n        \"mad_scaling_factor\": \"FLOAT\",\n        \"min_band_width_factor\": \"FLOAT\",\n    },\n    \"outputs\": {\n        \"band_filter_dataframe\": \"DATAFRAME\",\n        \"filter_criterium\": \"SERIES\",\n    },\n    \"name\": \"Moving Window Band Filter\",\n    \"category\": \"Band Filter\",\n    \"description\": \"Moving window band filter to detect outliers\",\n    \"version_tag\": \"0.1.3\",\n    \"id\": \"62738f78-0716-494a-983a-bc65c139cbab\",\n    \"revision_group_id\": \"596841b6-cac5-4b0c-8b08-96366f5f7105\",\n    \"state\": \"RELEASED\",\n    \"released_timestamp\": \"2022-10-14T08:37:41.180301+00:00\",\n}\n\n\ndef main(*, series, window_size, min_num_datapoints_in_window, mad_scaling_factor, min_band_width_factor):\n    # entrypoint function for this component\n    # ***** DO NOT EDIT LINES ABOVE *****\n    # write your function code here.\n\n    band_filter_dataframe, filter_criterium = calculate_band_filter_statistics(\n        series=series,\n        window_size=window_size,\n        min_num_datapoints_in_window=min_num_datapoints_in_window,\n        mad_scaling_factor=mad_scaling_factor,\n        min_band_width_factor=min_band_width_factor,\n    )\n\n    return {\n        \"band_filter_dataframe\": band_filter_dataframe,\n        \"filter_criterium\": filter_criterium,\n    }\n",
  "description": "Moving window band filter to detect outliers",
  "documentation": "# Moving Window Band Filter\n\n## Description\nThis component calculates all band filter statistics for a series. It additionally checks which observations are outside of the calculated band.\n\n## Inputs\n* **series** (Pandas Series): Series to perform the band filter calculation for.\n* **window_size** (str): Time period of each window. Must be a pandas frequency string.\n* **num_data_points** (int): Minimum number of observations required in a window to calculate a value.\n* **mad_normalization_constant** (float): Constant by which the MAD is multiplied. 1.4836 makes it equivalent to the standard deviation.\n* **min_band_width_factor** (float): Factor to calculate the minimum band width. The factor is multiplied with the median of the calculated MADs.\n\n## Outputs\n* **band_filter_dataframe** (Pandas DataFrame): Data frame with the input series, the calculated statistics and the filter criterium.\n* **filter_criterium** (Pandas Series): Series with the filter criterium.\n\n## Details\nThis component calculates all band filter statistics for the input series. This includes the calculation of the median and median absolute deviation (MAD) for moving windows of size **window_size**. Inside a window there needs to be at least **num_data_points** values in order to perform the calculation.\n\nThe MAD is calculated with a function that is selected depending on the size of the series. Both function base on numpy functions. If the size of the series exceeds 10,000 values numba just-in-time compilation is used to speed up the MAD calculated. The limit of 10,000 values in a series was chosen as result of runtime tests on multiple machines.\n\nThe calculated MADs are multiplied by **mad_normalization_constant**. This allows a normalization with regard to other figures. For example, the result with the constant 1.4826 is equivalent to the standard deviation.\n\nA minimum width of the band is ensured using the **min_band_width_factor**. The higher the value, the wider the band. The factor is multiplied with the MAD of the MADs calculated for all windows. All MAD that are smaller than the product are set to it.\n\nThe last step is to check which values are outside the band of their corresponding windows.\n\nThe component has two outputs. One is a data frame with all calculated values and the other one is a series with only the result of the last check. The data frame **band_filter_dataframe** can be used for visualization of the results and the series **filter_criterium** to filter the time series.\n\n## Examples\nThe json input of a typical call of this component is\n```\n{\n\t\"series\": {\n\t\t\t\t\"2022-01-01T00:00:00Z\": 1.058,\n\t\t\t\t\"2022-01-01T00:20:48Z\": 0.699,\n\t\t\t\t\"2022-01-01T00:41:37Z\": 1.08,\n\t\t\t\t\"2022-01-01T01:02:26Z\": 1.054,\n\t\t\t\t\"2022-01-01T01:23:15Z\": 0.763,\n\t\t\t\t\"2022-01-01T01:44:04Z\": 1.034,\n\t\t\t\t\"2022-01-01T02:04:53Z\": 0.965,\n\t\t\t\t\"2022-01-01T02:25:42Z\": 0.601,\n\t\t\t\t\"2022-01-01T02:46:31Z\": 0.933,\n\t\t\t\t\"2022-01-01T03:07:20Z\": 1.081,\n\t\t\t\t\"2022-01-01T03:28:09Z\": 2.1,\n\t\t\t\t\"2022-01-01T03:48:58Z\": 0.988,\n\t\t\t\t\"2022-01-01T04:09:47Z\": 0.741,\n\t\t\t\t\"2022-01-01T04:30:36Z\": 0.647,\n\t\t\t\t\"2022-01-01T04:51:25Z\": 0.556,\n\t\t\t\t\"2022-01-01T05:12:14Z\": 0.453,\n\t\t\t\t\"2022-01-01T05:33:03Z\": 1.009,\n\t\t\t\t\"2022-01-01T05:53:52Z\": 1.72,\n\t\t\t\t\"2022-01-01T06:14:41Z\": 1.002,\n\t\t\t\t\"2022-01-01T06:56:19Z\": 0.857,\n\t\t\t\t\"2022-01-01T07:17:08Z\": 0.864,\n\t\t\t\t\"2022-01-01T07:37:57Z\": 0.606,\n\t\t\t\t\"2022-01-01T07:58:46Z\": 0.899,\n\t\t\t\t\"2022-01-01T08:40:24Z\": 0.62,\n\t\t\t\t\"2022-01-01T10:03:40Z\": 0.721,\n\t\t\t\t\"2022-01-01T10:24:29Z\": 1.193,\n\t\t\t\t\"2022-01-01T10:45:18Z\": 0.833,\n\t\t\t\t\"2022-01-01T11:06:07Z\": 2.06,\n\t\t\t\t\"2022-01-01T11:26:56Z\": 0.68,\n\t\t\t\t\"2022-01-01T11:47:45Z\": 1.136,\n\t\t\t\t\"2022-01-01T12:08:34Z\": 0.62,\n\t\t\t\t\"2022-01-01T12:29:23Z\": 0.946,\n\t\t\t\t\"2022-01-01T12:50:12Z\": 0.746,\n\t\t\t\t\"2022-01-01T13:11:01Z\": 0.833,\n\t\t\t\t\"2022-01-01T13:31:50Z\": 0.857,\n\t\t\t\t\"2022-01-01T14:13:28Z\": 0.947,\n\t\t\t\t\"2022-01-01T14:34:17Z\": 0.841,\n\t\t\t\t\"2022-01-01T14:55:06Z\": 0.668,\n\t\t\t\t\"2022-01-01T15:15:55Z\": 0.675,\n\t\t\t\t\"2022-01-01T15:36:44Z\": 0.84,\n\t\t\t\t\"2022-01-01T15:57:33Z\": 0.821,\n\t\t\t\t\"2022-01-01T16:18:22Z\": 0.625,\n\t\t\t\t\"2022-01-01T16:39:11Z\": 1.155,\n\t\t\t\t\"2022-01-01T17:00:00Z\": 0.968\n\t},\n\t\"window_size\": \"17486.0S\",\n\t\"min_num_desired_datapoints\": 10,\n\t\"mad_scaling_factor\": 4.4478,\n\t\"min_band_width_factor\": 1\n}\n```\nThe expected output is\n```\n\t\"band_filter_dataframe\":\n\t\t{\n\t\t\t\"values\": {\n\t\t\t\t\"2022-01-01T00:00:00.000Z\":1.058,\n\t\t\t\t\"2022-01-01T00:20:48.000Z\":0.699,\n\t\t\t\t\"2022-01-01T00:41:37.000Z\":1.08,\n\t\t\t\t\"2022-01-01T01:02:26.000Z\":1.054,\n\t\t\t\t\"2022-01-01T01:23:15.000Z\":0.763,\n\t\t\t\t\"2022-01-01T01:44:04.000Z\":1.034,\n\t\t\t\t\"2022-01-01T02:04:53.000Z\":0.965,\n\t\t\t\t\"2022-01-01T02:25:42.000Z\":0.601,\n\t\t\t\t\"2022-01-01T02:46:31.000Z\":0.933,\n\t\t\t\t\"2022-01-01T03:07:20.000Z\":1.081,\n\t\t\t\t\"2022-01-01T03:28:09.000Z\":2.1,\n\t\t\t\t\"2022-01-01T03:48:58.000Z\":0.988,\n\t\t\t\t\"2022-01-01T04:09:47.000Z\":0.741,\n\t\t\t\t\"2022-01-01T04:30:36.000Z\":0.647,\n\t\t\t\t\"2022-01-01T04:51:25.000Z\":0.556,\n\t\t\t\t\"2022-01-01T05:12:14.000Z\":0.453,\n\t\t\t\t\"2022-01-01T05:33:03.000Z\":1.009,\n\t\t\t\t\"2022-01-01T05:53:52.000Z\":1.72,\n\t\t\t\t\"2022-01-01T06:14:41.000Z\":1.002,\n\t\t\t\t\"2022-01-01T06:56:19.000Z\":0.857,\n\t\t\t\t\"2022-01-01T07:17:08.000Z\":0.864,\n\t\t\t\t\"2022-01-01T07:37:57.000Z\":0.606,\n\t\t\t\t\"2022-01-01T07:58:46.000Z\":0.899,\n\t\t\t\t\"2022-01-01T08:40:24.000Z\":0.62,\n\t\t\t\t\"2022-01-01T10:03:40.000Z\":0.721,\n\t\t\t\t\"2022-01-01T10:24:29.000Z\":1.193,\n\t\t\t\t\"2022-01-01T10:45:18.000Z\":0.833,\n\t\t\t\t\"2022-01-01T11:06:07.000Z\":2.06,\n\t\t\t\t\"2022-01-01T11:26:56.000Z\":0.68,\n\t\t\t\t\"2022-01-01T11:47:45.000Z\":1.136,\n\t\t\t\t\"2022-01-01T12:08:34.000Z\":0.62,\n\t\t\t\t\"2022-01-01T12:29:23.000Z\":0.946,\n\t\t\t\t\"2022-01-01T12:50:12.000Z\":0.746,\n\t\t\t\t\"2022-01-01T13:11:01.000Z\":0.833,\n\t\t\t\t\"2022-01-01T13:31:50.000Z\":0.857,\n\t\t\t\t\"2022-01-01T14:13:28.000Z\":0.947,\n\t\t\t\t\"2022-01-01T14:34:17.000Z\":0.841,\n\t\t\t\t\"2022-01-01T14:55:06.000Z\":0.668,\n\t\t\t\t\"2022-01-01T15:15:55.000Z\":0.675,\n\t\t\t\t\"2022-01-01T15:36:44.000Z\":0.84,\n\t\t\t\t\"2022-01-01T15:57:33.000Z\":0.821,\n\t\t\t\t\"2022-01-01T16:18:22.000Z\":0.625,\n\t\t\t\t\"2022-01-01T16:39:11.000Z\":1.155,\n\t\t\t\t\"2022-01-01T17:00:00.000Z\":0.968\n\t\t\t},\n\t\t\t\"band_center\":{\n\t\t\t\t\"2022-01-01T00:41:37.000Z\":0.9995,\n\t\t\t\t\"2022-01-01T01:02:26.000Z\":1.034,\n\t\t\t\t\"2022-01-01T01:23:15.000Z\":1.011,\n\t\t\t\t\"2022-01-01T01:44:04.000Z\":0.988,\n\t\t\t\t\"2022-01-01T02:04:53.000Z\":0.9765,\n\t\t\t\t\"2022-01-01T02:25:42.000Z\":0.965,\n\t\t\t\t\"2022-01-01T02:46:31.000Z\":0.949,\n\t\t\t\t\"2022-01-01T03:07:20.000Z\":0.949,\n\t\t\t\t\"2022-01-01T03:28:09.000Z\":0.949,\n\t\t\t\t\"2022-01-01T03:48:58.000Z\":0.9765,\n\t\t\t\t\"2022-01-01T04:09:47.000Z\":0.965,\n\t\t\t\t\"2022-01-01T04:30:36.000Z\":0.933,\n\t\t\t\t\"2022-01-01T04:51:25.000Z\":0.933,\n\t\t\t\t\"2022-01-01T05:12:14.000Z\":0.864,\n\t\t\t\t\"2022-01-01T05:33:03.000Z\":0.864,\n\t\t\t\t\"2022-01-01T05:53:52.000Z\":0.8605,\n\t\t\t\t\"2022-01-01T06:14:41.000Z\":0.799,\n\t\t\t\t\"2022-01-01T06:56:19.000Z\":0.8605,\n\t\t\t\t\"2022-01-01T10:03:40.000Z\":0.866,\n\t\t\t\t\"2022-01-01T10:24:29.000Z\":0.7895,\n\t\t\t\t\"2022-01-01T10:45:18.000Z\":0.833,\n\t\t\t\t\"2022-01-01T11:06:07.000Z\":0.833,\n\t\t\t\t\"2022-01-01T11:26:56.000Z\":0.833,\n\t\t\t\t\"2022-01-01T11:47:45.000Z\":0.845,\n\t\t\t\t\"2022-01-01T12:08:34.000Z\":0.841,\n\t\t\t\t\"2022-01-01T12:29:23.000Z\":0.841,\n\t\t\t\t\"2022-01-01T12:50:12.000Z\":0.833,\n\t\t\t\t\"2022-01-01T13:11:01.000Z\":0.84,\n\t\t\t\t\"2022-01-01T13:31:50.000Z\":0.833,\n\t\t\t\t\"2022-01-01T14:13:28.000Z\":0.833,\n\t\t\t\t\"2022-01-01T14:34:17.000Z\":0.84,\n\t\t\t\t\"2022-01-01T14:55:06.000Z\":0.8365,\n\t\t\t\t\"2022-01-01T15:15:55.000Z\":0.84,\n\t\t\t\t\"2022-01-01T15:36:44.000Z\":0.8405\n\t\t\t},\n\t\t\t\"rolling_deviation\":{\n\t\t\t\t\"2022-01-01T00:41:37.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T01:02:26.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T01:23:15.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T01:44:04.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T02:04:53.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T02:25:42.000Z\":0.5159448,\n\t\t\t\t\"2022-01-01T02:46:31.000Z\":0.7072002,\n\t\t\t\t\"2022-01-01T03:07:20.000Z\":0.7072002,\n\t\t\t\t\"2022-01-01T03:28:09.000Z\":0.8762166,\n\t\t\t\t\"2022-01-01T03:48:58.000Z\":0.756126,\n\t\t\t\t\"2022-01-01T04:09:47.000Z\":0.9963072,\n\t\t\t\t\"2022-01-01T04:30:36.000Z\":0.8539776,\n\t\t\t\t\"2022-01-01T04:51:25.000Z\":0.6582744,\n\t\t\t\t\"2022-01-01T05:12:14.000Z\":0.9651726,\n\t\t\t\t\"2022-01-01T05:33:03.000Z\":0.644931,\n\t\t\t\t\"2022-01-01T05:53:52.000Z\":0.644931,\n\t\t\t\t\"2022-01-01T06:14:41.000Z\":0.8272908,\n\t\t\t\t\"2022-01-01T06:56:19.000Z\":0.8650971,\n\t\t\t\t\"2022-01-01T10:03:40.000Z\":0.9607248,\n\t\t\t\t\"2022-01-01T10:24:29.000Z\":0.7249914,\n\t\t\t\t\"2022-01-01T10:45:18.000Z\":0.6805134,\n\t\t\t\t\"2022-01-01T11:06:07.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T11:26:56.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T11:47:45.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T12:08:34.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T12:29:23.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T12:50:12.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T13:11:01.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T13:31:50.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T14:13:28.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T14:34:17.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T14:55:06.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T15:15:55.000Z\":0.511497,\n\t\t\t\t\"2022-01-01T15:36:44.000Z\":0.5203926\n\t\t\t},\n\t\t\t\"filter_criterium\":{\n\t\t\t\t\"2022-01-01T00:00:00.000Z\":true,\n\t\t\t\t\"2022-01-01T00:20:48.000Z\":true,\n\t\t\t\t\"2022-01-01T00:41:37.000Z\":true,\n\t\t\t\t\"2022-01-01T01:02:26.000Z\":true,\n\t\t\t\t\"2022-01-01T01:23:15.000Z\":true,\n\t\t\t\t\"2022-01-01T01:44:04.000Z\":true,\n\t\t\t\t\"2022-01-01T02:04:53.000Z\":true,\n\t\t\t\t\"2022-01-01T02:25:42.000Z\":true,\n\t\t\t\t\"2022-01-01T02:46:31.000Z\":true,\n\t\t\t\t\"2022-01-01T03:07:20.000Z\":true,\n\t\t\t\t\"2022-01-01T03:28:09.000Z\":false,\n\t\t\t\t\"2022-01-01T03:48:58.000Z\":true,\n\t\t\t\t\"2022-01-01T04:09:47.000Z\":true,\n\t\t\t\t\"2022-01-01T04:30:36.000Z\":true,\n\t\t\t\t\"2022-01-01T04:51:25.000Z\":true,\n\t\t\t\t\"2022-01-01T05:12:14.000Z\":true,\n\t\t\t\t\"2022-01-01T05:33:03.000Z\":true,\n\t\t\t\t\"2022-01-01T05:53:52.000Z\":false,\n\t\t\t\t\"2022-01-01T06:14:41.000Z\":true,\n\t\t\t\t\"2022-01-01T06:56:19.000Z\":true,\n\t\t\t\t\"2022-01-01T07:17:08.000Z\":true,\n\t\t\t\t\"2022-01-01T07:37:57.000Z\":true,\n\t\t\t\t\"2022-01-01T07:58:46.000Z\":true,\n\t\t\t\t\"2022-01-01T08:40:24.000Z\":true,\n\t\t\t\t\"2022-01-01T10:03:40.000Z\":true,\n\t\t\t\t\"2022-01-01T10:24:29.000Z\":true,\n\t\t\t\t\"2022-01-01T10:45:18.000Z\":true,\n\t\t\t\t\"2022-01-01T11:06:07.000Z\":false,\n\t\t\t\t\"2022-01-01T11:26:56.000Z\":true,\n\t\t\t\t\"2022-01-01T11:47:45.000Z\":true,\n\t\t\t\t\"2022-01-01T12:08:34.000Z\":true,\n\t\t\t\t\"2022-01-01T12:29:23.000Z\":true,\n\t\t\t\t\"2022-01-01T12:50:12.000Z\":true,\n\t\t\t\t\"2022-01-01T13:11:01.000Z\":true,\n\t\t\t\t\"2022-01-01T13:31:50.000Z\":true,\n\t\t\t\t\"2022-01-01T14:13:28.000Z\":true,\n\t\t\t\t\"2022-01-01T14:34:17.000Z\":true,\n\t\t\t\t\"2022-01-01T14:55:06.000Z\":true,\n\t\t\t\t\"2022-01-01T15:15:55.000Z\":true,\n\t\t\t\t\"2022-01-01T15:36:44.000Z\":true,\n\t\t\t\t\"2022-01-01T15:57:33.000Z\":true,\n\t\t\t\t\"2022-01-01T16:18:22.000Z\":true,\n\t\t\t\t\"2022-01-01T16:39:11.000Z\":true,\n\t\t\t\t\"2022-01-01T17:00:00.000Z\":true\n\t\t\t}\n\t\t}\n\n\t\"filter_criterium\":\n\t\t{\n\t\t\t\"2022-01-01T00:00:00.000Z\":true,\n\t\t\t\"2022-01-01T00:20:48.000Z\":true,\n\t\t\t\"2022-01-01T00:41:37.000Z\":true,\n\t\t\t\"2022-01-01T01:02:26.000Z\":true,\n\t\t\t\"2022-01-01T01:23:15.000Z\":true,\n\t\t\t\"2022-01-01T01:44:04.000Z\":true,\n\t\t\t\"2022-01-01T02:04:53.000Z\":true,\n\t\t\t\"2022-01-01T02:25:42.000Z\":true,\n\t\t\t\"2022-01-01T02:46:31.000Z\":true,\n\t\t\t\"2022-01-01T03:07:20.000Z\":true,\n\t\t\t\"2022-01-01T03:28:09.000Z\":false,\n\t\t\t\"2022-01-01T03:48:58.000Z\":true,\n\t\t\t\"2022-01-01T04:09:47.000Z\":true,\n\t\t\t\"2022-01-01T04:30:36.000Z\":true,\n\t\t\t\"2022-01-01T04:51:25.000Z\":true,\n\t\t\t\"2022-01-01T05:12:14.000Z\":true,\n\t\t\t\"2022-01-01T05:33:03.000Z\":true,\n\t\t\t\"2022-01-01T05:53:52.000Z\":false,\n\t\t\t\"2022-01-01T06:14:41.000Z\":true,\n\t\t\t\"2022-01-01T06:56:19.000Z\":true,\n\t\t\t\"2022-01-01T07:17:08.000Z\":true,\n\t\t\t\"2022-01-01T07:37:57.000Z\":true,\n\t\t\t\"2022-01-01T07:58:46.000Z\":true,\n\t\t\t\"2022-01-01T08:40:24.000Z\":true,\n\t\t\t\"2022-01-01T10:03:40.000Z\":true,\n\t\t\t\"2022-01-01T10:24:29.000Z\":true,\n\t\t\t\"2022-01-01T10:45:18.000Z\":true,\n\t\t\t\"2022-01-01T11:06:07.000Z\":false,\n\t\t\t\"2022-01-01T11:26:56.000Z\":true,\n\t\t\t\"2022-01-01T11:47:45.000Z\":true,\n\t\t\t\"2022-01-01T12:08:34.000Z\":true,\n\t\t\t\"2022-01-01T12:29:23.000Z\":true,\n\t\t\t\"2022-01-01T12:50:12.000Z\":true,\n\t\t\t\"2022-01-01T13:11:01.000Z\":true,\n\t\t\t\"2022-01-01T13:31:50.000Z\":true,\n\t\t\t\"2022-01-01T14:13:28.000Z\":true,\n\t\t\t\"2022-01-01T14:34:17.000Z\":true,\n\t\t\t\"2022-01-01T14:55:06.000Z\":true,\n\t\t\t\"2022-01-01T15:15:55.000Z\":true,\n\t\t\t\"2022-01-01T15:36:44.000Z\":true,\n\t\t\t\"2022-01-01T15:57:33.000Z\":true,\n\t\t\t\"2022-01-01T16:18:22.000Z\":true,\n\t\t\t\"2022-01-01T16:39:11.000Z\":true,\n\t\t\t\"2022-01-01T17:00:00.000Z\":true\n\t\t}\n```",
  "id": "62738f78-0716-494a-983a-bc65c139cbab",
  "io_interface": {
    "inputs": [
      {
        "data_type": "SERIES",
        "id": "9fdd5729-2e96-49c5-8c82-6bb76a4b48d9",
        "name": "series"
      },
      {
        "data_type": "STRING",
        "id": "2377fd13-6bba-41f4-9049-685dc958055e",
        "name": "window_size"
      },
      {
        "data_type": "INT",
        "id": "dcd6e0c8-e152-4a55-a6a9-288b7165e78f",
        "name": "min_num_datapoints_in_window"
      },
      {
        "data_type": "FLOAT",
        "id": "6b781b29-212b-4f9f-bbfc-b121fb6741f3",
        "name": "mad_scaling_factor"
      },
      {
        "data_type": "FLOAT",
        "id": "992f1138-737c-499f-8bb5-3229f40315c5",
        "name": "min_band_width_factor"
      }
    ],
    "outputs": [
      {
        "data_type": "DATAFRAME",
        "id": "e554acee-8684-4f5f-8e7e-f87143df73f1",
        "name": "band_filter_dataframe"
      },
      {
        "data_type": "SERIES",
        "id": "18217fad-9b8a-4b1a-8007-794090839cb5",
        "name": "filter_criterium"
      }
    ]
  },
  "name": "Moving Window Band Filter",
  "released_timestamp": "2022-10-14T08:37:41.180301+00:00",
  "revision_group_id": "596841b6-cac5-4b0c-8b08-96366f5f7105",
  "state": "RELEASED",
  "test_wiring": {
    "input_wirings": [
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "{\"2022-01-01T00:00:00Z\": 1.058,\n \"2022-01-01T00:20:48Z\": 0.699,\n \"2022-01-01T00:41:37Z\": 1.08,\n \"2022-01-01T01:02:26Z\": 1.054,\n \"2022-01-01T01:23:15Z\": 0.763,\n \"2022-01-01T01:44:04Z\": 1.034,\n \"2022-01-01T02:04:53Z\": 0.965,\n \"2022-01-01T02:25:42Z\": 0.601,\n \"2022-01-01T02:46:31Z\": 0.933,\n \"2022-01-01T03:07:20Z\": 1.081,\n \"2022-01-01T03:28:09Z\": 2.1,\n \"2022-01-01T03:48:58Z\": 0.988,\n \"2022-01-01T04:09:47Z\": 0.741,\n \"2022-01-01T04:30:36Z\": 0.647,\n \"2022-01-01T04:51:25Z\": 0.556,\n \"2022-01-01T05:12:14Z\": 0.453,\n \"2022-01-01T05:33:03Z\": 1.009,\n \"2022-01-01T05:53:52Z\": 1.72,\n \"2022-01-01T06:14:41Z\": 1.002,\n \"2022-01-01T06:56:19Z\": 0.857,\n \"2022-01-01T07:17:08Z\": 0.864,\n \"2022-01-01T07:37:57Z\": 0.606,\n \"2022-01-01T07:58:46Z\": 0.899,\n \"2022-01-01T08:40:24Z\": 0.62,\n \"2022-01-01T10:03:40Z\": 0.721,\n \"2022-01-01T10:24:29Z\": 1.193,\n \"2022-01-01T10:45:18Z\": 0.833,\n \"2022-01-01T11:06:07Z\": 2.06,\n \"2022-01-01T11:26:56Z\": 0.68,\n \"2022-01-01T11:47:45Z\": 1.136,\n \"2022-01-01T12:08:34Z\": 0.62,\n \"2022-01-01T12:29:23Z\": 0.946,\n \"2022-01-01T12:50:12Z\": 0.746,\n \"2022-01-01T13:11:01Z\": 0.833,\n \"2022-01-01T13:31:50Z\": 0.857,\n \"2022-01-01T14:13:28Z\": 0.947,\n \"2022-01-01T14:34:17Z\": 0.841,\n \"2022-01-01T14:55:06Z\": 0.668,\n \"2022-01-01T15:15:55Z\": 0.675,\n \"2022-01-01T15:36:44Z\": 0.84,\n \"2022-01-01T15:57:33Z\": 0.821,\n \"2022-01-01T16:18:22Z\": 0.625,\n \"2022-01-01T16:39:11Z\": 1.155,\n \"2022-01-01T17:00:00Z\": 0.968}"
        },
        "workflow_input_name": "series"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "17486.0S"
        },
        "workflow_input_name": "window_size"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "10"
        },
        "workflow_input_name": "min_num_datapoints_in_window"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "4.4478"
        },
        "workflow_input_name": "mad_scaling_factor"
      },
      {
        "adapter_id": "direct_provisioning",
        "filters": {
          "value": "1"
        },
        "workflow_input_name": "min_band_width_factor"
      }
    ],
    "output_wirings": []
  },
  "type": "COMPONENT",
  "version_tag": "0.1.3"
}